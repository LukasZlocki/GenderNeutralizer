@page "/candidatelist"
@using GenderNeutralizer.App.Models
@using GenderNeutralizer.App.Services

@inject ITextExtractionService _textExtractionService
@inject ICandidateService _candidateService

@rendermode InteractiveServer

<h3>CandidateList</h3>

<!-- Gathering user from sql db -->
@if (candidates.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Numer</th>
                <th>Imie</th>
                <th>Nazwisko</th>
                <th>Akcja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var candidate in candidates)
            {
                <tr>
                    <td>@candidate.CandidateId</td>
                    <td>@candidate.CandidateName</td>
                    <td>@candidate.CandidateLastName</td>
                    <td>
                        <!-- Add any actions you want, like download or delete -->
                        <button class="btn btn-danger btn-sm" @onclick="() => TextExtraction(candidate.CvFilePath, candidate.CandidateId)">Wyślij do managera</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No candidates in database .</p>
}


@code {

    private List<Candidate> candidates = new List<Candidate>();


    protected override async Task OnInitializedAsync()
    {
        // Gathering candidates from sql db
        candidates = await _candidateService.GetAllCandidatesAsync();
    }

    // On button click extracting text from pdf file
    public void TextExtraction(string filePath, string candidateId)
    {
        var txt = _textExtractionService.ExtractTextFromFile(filePath, candidateId);
    }
}