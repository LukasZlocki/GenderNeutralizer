@page "/candidatelist"
@using GenderNeutralizer.App.Models
@using GenderNeutralizer.App.Services

@inject ITextExtractionService _textExtractionService
@inject ICandidateService _candidateService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<!-- Gathering new user from sql db -->
<br />
<h3>Nowi kandydaci:</h3>
@if (NewCandidates.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Numer</th>
                <th>Imie</th>
                <th>Nazwisko</th>
                <th>Akcja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var candidate in NewCandidates)
            {
                <tr>
                    <td>@candidate.CandidateId</td>
                    <td>@candidate.CandidateName</td>
                    <td>@candidate.CandidateLastName</td>
                    <td>
                        <!-- Add any actions you want, like download or delete -->
                        <button class="btn btn-danger btn-sm" @onclick="() => CvNeutralize(candidate.CvFilePath, candidate.CandidateId)">Wyślij do managera</button>
                        <button class="btn btn-outline-primary btn-sm"
                        @onclick="() => DeleteCandidate(candidate.CandidateId)">
                            Usuń kandydata
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Brak nowych kandydatów .</p>
}

<!-- Gathering neutralized user from sql db -->
<br />
<br />
<br />
<h3>Kandydaci do decyzji:</h3>
@if (NewCandidates.Any())
{
    <div class="table-responsive">
        <table class="table table-hover table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Imię</th>
                    <th scope="col">Nazwisko</th>
                    <th scope="col">Akcja</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var candidate in NeutralizedCandidates)
                {
                    <tr>
                        <td>@candidate.CandidateId</td>
                        <td>@candidate.CandidateName</td>
                        <td>@candidate.CandidateLastName</td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm"
                            @onclick="() => ShowCandidate(candidate.NeutralizedText)">
                                Pokaż CV
                            </button>
                            <button class="btn btn-outline-primary btn-sm"
                            @onclick="() => DeleteCandidate(candidate.CandidateId)">
                                Usuń kandydata
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Brak kandydatów.</p>
}

<!-- Modal to show neutralized cv -->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Zanonimizowane CV</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <pre>@selectedCandidateCv</pre> <!-- Preformatted for readability -->
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {

    // For modal purposes
    private bool showModal = false;
    private string selectedCandidateCv = string.Empty;

    private List<Candidate> NewCandidates = new List<Candidate>();
    private List<Candidate> NeutralizedCandidates = new List<Candidate>();

    protected override async Task OnInitializedAsync()
    {
        // Gathering new candidates from sql db
        NewCandidates = await _candidateService.GetAllCandidatesAsync();

        // Gathering neutralized candidates from sql db
        NeutralizedCandidates = await _candidateService.GetAllNeutralizedCandidatesAsync();

    }

    // On button click extracting text from pdf file
    private async void CvNeutralize(string filePath, int candidateId)
    {
        bool isCandidateNeutralized = await _textExtractionService.NeutralizeCandidateCv(filePath, candidateId);
        if (isCandidateNeutralized)
        {
            Navigation.NavigateTo(Navigation.Uri, forceLoad: false);
        }   
    }

    private async void DeleteCandidate(int candidateId)
    {
        bool isCandidateDeleted = await _candidateService.DeleteCandidateAsync(candidateId);   
        if (isCandidateDeleted)
        {
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
    }

    private void ShowCandidate(string NeutralizedCv)
    {
        selectedCandidateCv = NeutralizedCv;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }
}